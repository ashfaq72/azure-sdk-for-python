parameters:
  ServiceDirectory: not-set
  ArmTemplateParameters: '@{}'
  DeleteAfterHours: 8
  Location: ''
  EnvVars: {}
  SubscriptionConfiguration: $(sub-config-azure-cloud-test-resources)
  ServiceConnection: not-specified
  ResourceType: test
  UseFederatedAuth: false

# SubscriptionConfiguration will be splatted into the parameters of the test
# resources script. It should be JSON in the form:
# {
#   "SubscriptionId": "<subscription id>",
#   "TenantId": "<tenant id>",
#   "TestApplicationId": "<test app id>",
#   "TestApplicationSecret": "<test app secret>",
#   "ProvisionerApplicationId": "<provisioner app id>",
#   "ProvisionerApplicationSecret": "<provisioner app secret>",
#   "Environment": "AzureCloud | AzureGov | AzureChina | <other environment>"
#   "EnvironmentVariables": {
#       "SERVICE_MANAGEMENT_URL": "<service management url>",
#       "STORAGE_ENDPOINT_SUFFIX": "<storage endpoint suffix>",
#       "RESOURCE_MANAGER_URL": "<resource manager url>",
#       "SEARCH_ENDPOINT_SUFFIX": "<search endpoint suffix>",
#       "COSMOS_TABLES_ENDPOINT_SUFFIX": "<cosmos tables endpoint suffix>"
#   },
#   "ArmTemplateParameters": {
#       "keyVaultDomainSuffix": "<keyVaultDomainSuffix>",
#       "storageEndpointSuffix": "<storageEndpointSuffix>",
#       "endpointSuffix": "<endpointSuffix>",
#       "azureAuthorityHost": "<azureAuthorityHost>",
#       "keyVaultEndpointSuffix": "<keyVaultEndpointSuffix>"
#   }
# }


steps:
  - template: /eng/common/pipelines/templates/steps/cache-ps-modules.yml

  - template: /eng/common/TestResources/setup-environments.yml

  - ${{ if eq('true', parameters.UseFederatedAuth) }}:
    - task: AzurePowerShell@5
      displayName: ðŸš€ Deploy test resources
      env:
        TEMP: $(Agent.TempDirectory)
        PoolSubnet: $(PoolSubnet)
        ${{ insert }}: ${{ parameters.EnvVars }}
      inputs:
        azureSubscription: ${{ parameters.ServiceConnection }}
        azurePowerShellVersion: LatestVersion
        pwsh: true
        ScriptType: InlineScript
        Inline: |
          eng/common/scripts/Import-AzModules.ps1
          $subscriptionConfiguration = @'
            ${{ parameters.SubscriptionConfiguration }}
          '@ | ConvertFrom-Json -AsHashtable;

          $account = (Get-AzContext).Account          
          # "SubscriptionId": "2cd617ea-1866-46b1-90e3-fffb087ebf9b",
          # "TenantId": "72f988bf-86f1-41af-91ab-2d7cd011db47",
          $subscriptionConfiguration["TestApplicationId"] = $account.Id
          # "TestApplicationSecret": "",
          # "TestApplicationOid": "30511c9d-ba1a-4c7b-b422-5b543da11b3f",
          $subscriptionConfiguration["ProvisionerApplicationId"] = $account.Id
          # "ProvisionerApplicationSecret": "",
          # "ProvisionerApplicationOid": "30511c9d-ba1a-4c7b-b422-5b543da11b3f",
          # "Environment": "AzureCloud",
          # "AzureSubscription": "Azure SDK Test Resources",

          # The subscriptionConfiguration may have ArmTemplateParameters defined, so
          # pass those in via the ArmTemplateParameters flag, and handle any
          # additional parameters from the pipelines via AdditionalParameters
          eng/common/TestResources/New-TestResources.ps1 `
            -ResourceType '${{ parameters.ResourceType }}' `
            -ServiceDirectory '${{ parameters.ServiceDirectory }}' `
            -Location '${{ parameters.Location }}' `
            -DeleteAfterHours '${{ parameters.DeleteAfterHours }}' `
            @subscriptionConfiguration `
            -AdditionalParameters ${{ parameters.ArmTemplateParameters }} `
            -AllowIpRanges ('$(azsdk-corp-net-ip-ranges)' -split ',') `
            -CI `
            -Force `
            -Verbose | Out-Null

  - ${{ else }}:
    - pwsh: |
        eng/common/scripts/Import-AzModules.ps1
        $subscriptionConfiguration = @'
          ${{ parameters.SubscriptionConfiguration }}
        '@ | ConvertFrom-Json -AsHashtable;

        # The subscriptionConfiguration may have ArmTemplateParameters defined, so
        # pass those in via the ArmTemplateParameters flag, and handle any
        # additional parameters from the pipelines via AdditionalParameters
        eng/common/TestResources/New-TestResources.ps1 `
          -ResourceType '${{ parameters.ResourceType }}' `
          -ServiceDirectory '${{ parameters.ServiceDirectory }}' `
          -Location '${{ parameters.Location }}' `
          -DeleteAfterHours '${{ parameters.DeleteAfterHours }}' `
          @subscriptionConfiguration `
          -AdditionalParameters ${{ parameters.ArmTemplateParameters }} `
          -AllowIpRanges ('$(azsdk-corp-net-ip-ranges)' -split ',') `
          -CI `
          -ServicePrincipalAuth `
          -Force `
          -Verbose | Out-Null
      displayName: ðŸš€ Deploy test resources
      env:
        TEMP: $(Agent.TempDirectory)
        PoolSubnet: $(PoolSubnet)
        ${{ insert }}: ${{ parameters.EnvVars }}
